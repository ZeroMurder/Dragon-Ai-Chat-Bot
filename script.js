// Chat Application Class for GitHub Pages
class ChatApp {
    constructor() {
        this.apiKey = '';
        this.apiId = '';
        this.currentPlan = 'dragon';
        this.messages = [];
        this.isTyping = false;
        this.dragonKnowledge = new DragonKnowledgeBase();
        
        this.initializeElements();
        this.bindEvents();
        this.loadSettings();
        this.updateSubscriptionStatus();
        this.preloadKBIfEmpty();

        // Initialize Markdown rendering and syntax highlighting for assistant
        if (typeof marked !== 'undefined') {
            marked.setOptions({
                breaks: true,
                highlight: function(code, lang) {
                    if (typeof hljs !== 'undefined') {
                        try {
                            if (lang && hljs.getLanguage(lang)) {
                                return hljs.highlight(code, { language: lang }).value;
                            }
                            return hljs.highlightAuto(code).value;
                        } catch (e) {}
                    }
                    return code;
                }
            });
        }
    }

    initializeElements() {
        // Main elements
        this.messageInput = document.getElementById('messageInput');
        this.sendButton = document.getElementById('sendButton');
        this.photoButton = document.getElementById('photoButton');
        this.photoInput = document.getElementById('photoInput');
        this.chatMessages = document.getElementById('chatMessages');
        this.welcomeSection = document.getElementById('welcomeSection');
        this.typingIndicator = document.getElementById('typingIndicator');
        this.charCount = document.getElementById('charCount');
        
        // Auth UI
        this.currentUserNameEl = document.getElementById('currentUserName');
        this.loginBtn = document.getElementById('loginBtn');
        this.signupBtn = document.getElementById('signupBtn');
        
        // Subscription elements
        this.subscriptionStatus = document.getElementById('subscriptionStatus');
        
        // Modal elements
        this.settingsModal = document.getElementById('settingsModal');
        this.closeSettingsModal = document.getElementById('closeSettingsModal');
        this.settingsBtn = document.getElementById('settingsBtn');
        this.clearBtn = document.getElementById('clearBtn');
        
        // Settings elements
        this.apiKeyInput = document.getElementById('apiKey');
        this.apiIdInput = document.getElementById('apiId');
        this.saveSettingsBtn = document.querySelector('.save-settings-btn');
        this.kbInput = document.getElementById('kbInput');
        this.kbAddBtn = document.getElementById('kbAddBtn');
        this.kbBuildIndexBtn = document.getElementById('kbBuildIndexBtn');
    }

    bindEvents() {
        // Send message
        this.sendButton.addEventListener('click', () => this.sendMessage());
        this.messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.sendMessage();
            }
        });

        // Photo upload
        this.photoButton.addEventListener('click', () => this.photoInput.click());
        this.photoInput.addEventListener('change', (e) => this.handlePhotoUpload(e));

        // Auto-resize textarea
        this.messageInput.addEventListener('input', () => {
            this.autoResizeTextarea();
            this.updateCharCount();
        });

        // Modal controls
        this.closeSettingsModal.addEventListener('click', () => this.hideSettingsModal());
        this.settingsBtn.addEventListener('click', () => this.showSettingsModal());
        this.clearBtn.addEventListener('click', () => this.clearChat());
        this.saveSettingsBtn.addEventListener('click', () => this.saveSettings());
        if (this.loginBtn) this.loginBtn.addEventListener('click', () => this.loginWithGoogle());
        if (this.signupBtn) this.signupBtn.addEventListener('click', () => this.signupWithEmail());
        if (this.kbAddBtn) this.kbAddBtn.addEventListener('click', () => this.addToKnowledgeBase());
        if (this.kbBuildIndexBtn) this.kbBuildIndexBtn.addEventListener('click', () => this.buildVectorIndex());

        // Close modals on outside click
        this.settingsModal.addEventListener('click', (e) => {
            if (e.target === this.settingsModal) {
                this.hideSettingsModal();
            }
        });
    }

    autoResizeTextarea() {
        this.messageInput.style.height = 'auto';
        this.messageInput.style.height = Math.min(this.messageInput.scrollHeight, 150) + 'px';
    }

    updateCharCount() {
        const count = this.messageInput.value.length;
        this.charCount.textContent = `${count}/2000`;
        
        if (count > 1800) {
            this.charCount.style.color = '#ef4444';
        } else if (count > 1500) {
            this.charCount.style.color = '#fbbf24';
        } else {
            this.charCount.style.color = 'rgba(255, 255, 255, 0.7)';
        }
    }

    async sendMessage() {
        const message = this.messageInput.value.trim();
        if (!message || this.isTyping) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if (this.handleSpecialCommands(message)) {
            this.messageInput.value = '';
            this.autoResizeTextarea();
            this.updateCharCount();
            return;
        }

        // Check API configuration
        if (!this.apiKey || !this.apiId) {
            this.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö', 'error');
            this.showSettingsModal();
            return;
        }

        // Dragon plan has no limits

        // RAG: build context
        const ragContext = this.retrieveKnowledgeContext(message, 4);

        // Add user message
        this.addMessage(message, 'user');
        this.messageInput.value = '';
        this.autoResizeTextarea();
        this.updateCharCount();
        this.hideWelcomeSection();

        // Show typing indicator
        this.showTypingIndicator();

        try {
            // Get AI response using Yandex Cloud API directly
            const response = await this.getAIResponse(ragContext ? `${ragContext}\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${message}` : message);
            this.hideTypingIndicator();
            this.addMessage(response, 'assistant');
        } catch (error) {
            this.hideTypingIndicator();
            this.addMessage('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'assistant');
            console.error('AI Response Error:', error);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    handleSpecialCommands(message) {
        const lowerMessage = message.toLowerCase();
        
        // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
        if (lowerMessage === '/—Ñ–∞–∫—Ç' || lowerMessage === '/fact') {
            this.showRandomFact();
            return true;
        }
        
        if (lowerMessage === '/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' || lowerMessage === '/stats') {
            this.showKnowledgeStats();
            return true;
        }
        
        if (lowerMessage.startsWith('/–ø–æ–∏—Å–∫ ') || lowerMessage.startsWith('/search ')) {
            const query = message.substring(message.indexOf(' ') + 1);
            this.searchInKnowledge(query);
            return true;
        }
        
        if (lowerMessage === '/–ø–æ–º–æ—â—å' || lowerMessage === '/help') {
            this.showHelp();
            return true;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π –∏ –ø—Ä–æ—Å—å–± –æ –∫–æ–¥–µ
        if (this.handleGreetingsAndCodeRequests(message)) {
            return true;
        }
        
        return false;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π –∏ –ø—Ä–æ—Å—å–± –æ –∫–æ–¥–µ
    handleGreetingsAndCodeRequests(message) {
        const lowerMessage = message.toLowerCase().trim();
        
        // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        const greetings = [
            '–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', 'hi', 'hello', 
            '–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å', '–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä', '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ',
            '—Å–∞–ª—é—Ç', '—Ö–∞–π', '–ø—Ä–∏–≤–µ—Ç–∏–∫', '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é'
        ];
        
        // –ü—Ä–æ—Å—å–±—ã –æ –∫–æ–¥–µ
        const codeRequests = [
            '—Å–¥–µ–ª–∞–π –∫–æ–¥', '–Ω–∞–ø–∏—à–∏ –∫–æ–¥', '—Å–æ–∑–¥–∞–π –∫–æ–¥', '–ø–æ–º–æ–≥–∏ —Å –∫–æ–¥–æ–º',
            '–Ω–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É', '—Å–æ–∑–¥–∞–π –ø—Ä–æ–≥—Ä–∞–º–º—É', '—Å–¥–µ–ª–∞–π —Å–∫—Ä–∏–ø—Ç',
            '–Ω–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç', '—Å–æ–∑–¥–∞–π —Å–∞–π—Ç', '—Å–¥–µ–ª–∞–π —Å–∞–π—Ç', '–Ω–∞–ø–∏—à–∏ —Å–∞–π—Ç',
            '–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '—Å–∫—Ä–∏–ø—Ç', '—Å–∞–π—Ç'
        ];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        for (const greeting of greetings) {
            if (lowerMessage.includes(greeting)) {
                this.searchInKnowledge('–ü—Ä–∏–≤–µ—Ç');
                return true;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—å–±—ã –æ –∫–æ–¥–µ
        for (const codeRequest of codeRequests) {
            if (lowerMessage.includes(codeRequest)) {
                this.searchInKnowledge('–°–¥–µ–ª–∞–π –∫–æ–¥');
                return true;
            }
        }
        
        return false;
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
    showHelp() {
        const helpMessage = `üêâ **–ö–æ–º–∞–Ω–¥—ã Dragon Chat:**\n\n` +
            `**–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:**\n` +
            `‚Ä¢ \`/—Ñ–∞–∫—Ç\` - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç\n` +
            `‚Ä¢ \`/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π\n` +
            `‚Ä¢ \`/–ø–æ–∏—Å–∫ [–∑–∞–ø—Ä–æ—Å]\` - –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π\n\n` +
            `**–û–±—â–∏–µ:**\n` +
            `‚Ä¢ \`/–ø–æ–º–æ—â—å\` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n` +
            `**–ü—Ä–∏–º–µ—Ä—ã:**\n` +
            `‚Ä¢ \`/–ø–æ–∏—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ\`\n` +
            `‚Ä¢ \`/–ø–æ–∏—Å–∫ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ\`\n` +
            `‚Ä¢ \`/–ø–æ–∏—Å–∫ –∑–¥–æ—Ä–æ–≤—å–µ\`\n\n` +
            `**–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π Dragon —Å–æ–¥–µ—Ä–∂–∏—Ç:**\n` +
            `üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\n` +
            `ü§ñ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç\n` +
            `üíº –ë–∏–∑–Ω–µ—Å –∏ —Å—Ç–∞—Ä—Ç–∞–ø—ã\n` +
            `üî¨ –ù–∞—É–∫–∞ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n` +
            `üè• –ó–¥–æ—Ä–æ–≤—å–µ –∏ –º–µ–¥–∏—Ü–∏–Ω–∞\n` +
            `üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ\n` +
            `üí¨ –û–±—â–µ–Ω–∏–µ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è\n` +
            `üèõÔ∏è –ò—Å—Ç–æ—Ä–∏—è –∏ –∫—É–ª—å—Ç—É—Ä–∞\n` +
            `üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è –∏ –ø—Ä–∏—Ä–æ–¥–∞\n` +
            `üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è\n` +
            `‚ö° –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏\n` +
            `ü§î –§–∏–ª–æ—Å–æ—Ñ–∏—è –∏ –º—ã—à–ª–µ–Ω–∏–µ\n` +
            `üç≥ –ö—É–ª–∏–Ω–∞—Ä–∏—è –∏ –ø–∏—Ç–∞–Ω–∏–µ\n` +
            `üí™ –°–ø–æ—Ä—Ç –∏ —Ñ–∏—Ç–Ω–µ—Å\n` +
            `üé® –ò—Å–∫—É—Å—Å—Ç–≤–æ –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ`;
        
        this.addMessage(helpMessage, 'assistant');
    }

    addMessage(text, sender) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${sender}`;
        
        const avatar = document.createElement('div');
        avatar.className = 'message-avatar';
        avatar.innerHTML = sender === 'user' ? '<i class="fas fa-user"></i>' : '<i class="fas fa-dragon"></i>';
        
        const content = document.createElement('div');
        content.className = 'message-content';
        
        const messageText = document.createElement('div');
        messageText.className = 'message-text';
        if (sender === 'assistant' && typeof marked !== 'undefined') {
            messageText.innerHTML = marked.parse(text);
        } else {
            messageText.textContent = text;
        }
        
        const messageTime = document.createElement('div');
        messageTime.className = 'message-time';
        messageTime.textContent = new Date().toLocaleTimeString('ru-RU', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
        
        // Feedback controls for assistant answers
        if (sender === 'assistant') {
            const controls = document.createElement('div');
            controls.style.marginTop = '8px';
            controls.style.display = 'flex';
            controls.style.gap = '8px';
            const notHelpful = document.createElement('button');
            notHelpful.textContent = '–≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–º–æ–≥';
            notHelpful.style.cssText = 'background: rgba(239,68,68,0.2); border:1px solid rgba(239,68,68,0.4); color:#fff; padding:6px 10px; border-radius:8px; cursor:pointer;';
            const saveHelpful = document.createElement('button');
            saveHelpful.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É';
            saveHelpful.style.cssText = 'background: rgba(16,185,129,0.2); border:1px solid rgba(16,185,129,0.4); color:#fff; padding:6px 10px; border-radius:8px; cursor:pointer;';

            // capture current question (last user message before this assistant message)
            const lastUser = [...this.messages].reverse().find(m => m.sender === 'user');
            const questionText = lastUser?.text || '';

            notHelpful.addEventListener('click', async () => {
                this.savePairToKB(questionText, text, 'not_helpful');
                this.showNotification('–ü–∞—Ä–∞ –≤–æ–ø—Ä–æ—Å/–æ—Ç–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É. –ü—ã—Ç–∞—é—Å—å —É–ª—É—á—à–∏—Ç—å –æ—Ç–≤–µ—Ç...', 'warning');
                try {
                    const improved = await this.getAIResponse(`–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π, –ø–æ—á–µ–º—É –æ—Ç–≤–µ—Ç –Ω–∏–∂–µ –Ω–µ –ø–æ–º–æ–≥, —É–∫–∞–∂–∏ 1-2 –ø—Ä–∏—á–∏–Ω—ã –∫—Ä–∞—Ç–∫–æ, –∑–∞—Ç–µ–º –¥–∞–π —É–ª—É—á—à–µ–Ω–Ω—ã–π, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —à–∞–≥–∞–º–∏ –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏.
–ö–æ–Ω—Ç–µ–∫—Å—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–æ—Ä–∏—Ç–µ–Ω–Ω–æ.

–í–æ–ø—Ä–æ—Å: ${questionText}
–ù–µ—É–¥–∞—á–Ω—ã–π –æ—Ç–≤–µ—Ç:
${text}`);
                    this.addMessage(improved, 'assistant');
                } catch (e) {
                    this.showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –æ—Ç–≤–µ—Ç', 'error');
                }
            });

            saveHelpful.addEventListener('click', () => {
                this.savePairToKB(questionText, text, 'helpful');
                this.showNotification('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π', 'success');
            });

            controls.appendChild(notHelpful);
            controls.appendChild(saveHelpful);
            content.appendChild(controls);
        }

        content.appendChild(messageText);
        content.appendChild(messageTime);
        messageDiv.appendChild(avatar);
        messageDiv.appendChild(content);
        
        this.chatMessages.appendChild(messageDiv);
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
        
        // Store message
        this.messages.push({ text, sender, timestamp: new Date() });
    }

    showTypingIndicator() {
        this.isTyping = true;
        this.typingIndicator.style.display = 'flex';
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    }

    hideTypingIndicator() {
        this.isTyping = false;
        this.typingIndicator.style.display = 'none';
    }

    hideWelcomeSection() {
        if (this.welcomeSection) {
            this.welcomeSection.style.display = 'none';
        }
    }

    async getAIResponse(message) {
        // Try serverless-free (mock) if no API key set
        if (!this.apiKey || !this.apiId) {
            const rag = this.retrieveKnowledgeContext(message, 5);
            const prompt = rag ? `${rag}\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${message}` : message;
            return await this.getMockAIResponse(prompt);
        }
        try {
            // Direct call to Yandex Cloud API
            const rag = this.retrieveKnowledgeContext(message, 5);
            const prompt = rag ? `${rag}\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${message}` : message;
            const response = await fetch('https://llm.api.cloud.yandex.net/foundationModels/v1/completion', {
                method: 'POST',
                headers: {
                    'Authorization': `Api-Key ${this.apiKey}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    modelUri: `gpt://${this.apiId}/yandexgpt`,
                    completionOptions: {
                        stream: false,
                        temperature: 0.6,
                        maxTokens: 2000
                    },
                    messages: [
                        {
                            role: 'system',
                            text: '–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Dragon. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ Markdown. –î–æ–±–∞–≤–ª—è–π –≥–æ—Ç–æ–≤—ã–µ –∫–æ–¥-—Å–Ω–∏–ø–ø–µ—Ç—ã –∏ –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ –∏ —Å—Å—ã–ª–∞–π—Å—è –Ω–∞ –Ω–µ–≥–æ –∫—Ä–∞—Ç–∫–æ.'
                        },
                        {
                            role: 'user',
                            text: prompt
                        }
                    ]
                })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'API request failed');
            }

            const data = await response.json();
            return data.result.alternatives[0].message.text;
        } catch (error) {
            // Fallback to mock response with RAG
            console.warn('API not available, using mock response:', error.message);
            const rag = this.retrieveKnowledgeContext(message, 5);
            const prompt = rag ? `${rag}\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${message}` : message;
            return await this.getMockAIResponse(prompt);
        }
    }

    // Mock AI response for demonstration
    async getMockAIResponse(message) {
        // Simulate network delay
        await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));
        
        const responses = [
            "–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –ø–æ–¥—É–º–∞—Ç—å...",
            "–Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É:",
            "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –º–æ–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö, —è –±—ã —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª:",
            "–≠—Ç–æ —Å–ª–æ–∂–Ω–∞—è —Ç–µ–º–∞, –Ω–æ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –≤–∞–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç:",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –í–æ—Ç –º–æ–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏:"
        ];
        
        const randomResponse = responses[Math.floor(Math.random() * responses.length)];
        const detailedResponse = this.generateDetailedResponse(message);
        
        return `${randomResponse}\n\n${detailedResponse}`;
    }

    generateDetailedResponse(message) {
        // –ë–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω—ã–π –º–æ–∫-–æ—Ç–≤–µ—Ç —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∫–æ–¥–∞/—à–∞–≥–∞–º–∏
        const m = message.toLowerCase();
        if (m.includes('–ø–æ–≥–æ–¥–∞')) {
            return `–í–æ—Ç –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ:

1) –û—Ç–∫—Ä–æ–π—Ç–µ —Å–∞–π—Ç gismeteo.ru –∏–ª–∏ open-meteo.com
2) –î–ª—è –∫–æ–¥–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API Open-Meteo (–±–µ–∑ –∫–ª—é—á–µ–π):

```javascript
// –ü—Ä–∏–º–µ—Ä: –ø–æ–≥–æ–¥–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (–ú–æ—Å–∫–≤–∞)
async function getWeather() {
  const url = 'https://api.open-meteo.com/v1/forecast?latitude=55.75&longitude=37.62&current_weather=true&timezone=auto';
  const r = await fetch(url);
  const data = await r.json();
  return data.current_weather; // —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –≤–µ—Ç–µ—Ä –∏ —Ç.–¥.
}
getWeather().then(console.log);
```
`;
        }
        if (m.includes('—Å–æ–∑–¥–∞–π –∫–æ–¥') || m.includes('–Ω–∞–ø–∏—à–∏ –∫–æ–¥') || m.includes('—Å–¥–µ–ª–∞–π –∫–æ–¥')) {
            return `–ì–æ—Ç–æ–≤–æ! –í–æ—Ç —à–∞–±–ª–æ–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ —Å–∞–π—Ç–∞:

```html
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title>–°—Ç–∞—Ä—Ç</title>
  <style>body{font-family:Arial;margin:40px}</style>
</head>
<body>
  <h1>–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!</h1>
  <p>–≠—Ç–æ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω.</p>
  <script>
    console.log('–ì–æ—Ç–æ–≤–æ!');
  </script>
</body>
</html>
```

–•–æ—á–µ—à—å –¥—Ä—É–≥–æ–π —Å—Ç–µ–∫? –°–∫–∞–∂–∏, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ (React, Node, Python, Telegram-–±–æ—Ç –∏ —Ç.–¥.).`;
        }
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç
        return `–í–æ—Ç —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:

- –£—Ç–æ—á–Ω–∏—Ç–µ —Ü–µ–ª—å –∏ –∂–µ–ª–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
- –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –∫–æ–¥ ‚Äî —É–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫/—Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –∏ –ø—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª—é —à–∞–≥–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞`;
    }

    showSettingsModal() {
        this.settingsModal.classList.add('show');
        this.apiKeyInput.value = this.apiKey;
        this.apiIdInput.value = this.apiId;
    }

    hideSettingsModal() {
        this.settingsModal.classList.remove('show');
    }

    handlePhotoUpload(event) {
        const file = event.target.files[0];
        if (!file) return;

        // Dragon plan allows unlimited photos
        this.processPhoto(file);
    }

    processPhoto(file) {
        const reader = new FileReader();
        reader.onload = (e) => {
            const photoData = e.target.result;
            this.addPhotoMessage(photoData, file.name);
        };
        reader.readAsDataURL(file);
    }

    addPhotoMessage(photoData, fileName) {
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message user';
        
        const avatar = document.createElement('div');
        avatar.className = 'message-avatar';
        avatar.innerHTML = '<i class="fas fa-user"></i>';
        
        const content = document.createElement('div');
        content.className = 'message-content';
        
        const photoContainer = document.createElement('div');
        photoContainer.className = 'photo-container';
        
        const photoImg = document.createElement('img');
        photoImg.src = photoData;
        photoImg.className = 'message-photo';
        photoImg.alt = '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ';
        
        const photoInfo = document.createElement('div');
        photoInfo.className = 'photo-info';
        photoInfo.innerHTML = `<i class="fas fa-camera"></i> ${fileName}`;
        
        photoContainer.appendChild(photoImg);
        photoContainer.appendChild(photoInfo);
        content.appendChild(photoContainer);
        
        const messageTime = document.createElement('div');
        messageTime.className = 'message-time';
        messageTime.textContent = new Date().toLocaleTimeString('ru-RU', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
        content.appendChild(messageTime);
        
        messageDiv.appendChild(avatar);
        messageDiv.appendChild(content);
        
        this.chatMessages.appendChild(messageDiv);
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
        
        // Store message
        this.messages.push({ 
            type: 'photo', 
            data: photoData, 
            fileName: fileName, 
            sender: 'user', 
            timestamp: new Date() 
        });
    }

    // Auth helpers (Google + Email/Password via Firebase compat CDN)
    async loginWithGoogle() {
        try {
            if (!this.auth) return this.showNotification('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', 'warning');
            const provider = new firebase.auth.GoogleAuthProvider();
            await this.auth.signInWithPopup(provider);
            this.showNotification('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω', 'success');
            if (this.currentUserNameEl) {
                const name = this.auth.currentUser?.displayName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                this.currentUserNameEl.textContent = name;
            }
        } catch (e) {
            this.showNotification('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google', 'error');
        }
    }

    async signupWithEmail() {
        try {
            if (!this.auth) return this.showNotification('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', 'warning');
            const email = prompt('–í–≤–µ–¥–∏—Ç–µ email:');
            const pass = email ? prompt('–°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å:') : null;
            if (!email || !pass) return;
            await this.auth.createUserWithEmailAndPassword(email, pass);
            const name = prompt('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∏–∫):');
            if (name && name.trim()) {
                localStorage.setItem('chatDisplayName', name.trim());
                if (this.currentUserNameEl) this.currentUserNameEl.textContent = name.trim();
            }
            this.showNotification('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞', 'success');
        } catch (e) {
            this.showNotification('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', 'error');
        }
    }

    getUserId() {
        let userId = localStorage.getItem('chatUserId');
        if (!userId) {
            userId = 'user_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            localStorage.setItem('chatUserId', userId);
        }
        return userId;
    }

    updateSubscriptionStatus() {
        const planElement = this.subscriptionStatus.querySelector('.plan-name');
        if (planElement) {
            planElement.textContent = 'Dragon';
        }
    }

    saveSettings() {
        this.apiKey = this.apiKeyInput.value.trim();
        this.apiId = this.apiIdInput.value.trim();
        
        localStorage.setItem('chatApiKey', this.apiKey);
        localStorage.setItem('chatApiId', this.apiId);
        
        this.showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success');
        this.hideSettingsModal();
    }

    loadSettings() {
        this.apiKey = localStorage.getItem('chatApiKey') || '';
        this.apiId = localStorage.getItem('chatApiId') || '';
        this.currentPlan = 'dragon';
        
        // Auto-load default settings if available
        if (typeof window !== 'undefined' && window.DefaultConfig && window.DefaultConfig.autoLoad) {
            if (!this.apiKey || !this.apiId) {
                this.apiKey = window.DefaultConfig.apiKey;
                this.apiId = window.DefaultConfig.apiId;
                localStorage.setItem('chatApiKey', this.apiKey);
                localStorage.setItem('chatApiId', this.apiId);
                console.log('üîë API –∫–ª—é—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
            }

            // Initialize Firebase Auth (compat via CDN)
            try {
                if (window.DefaultConfig.firebase && window.firebase) {
                    if (!firebase.apps?.length) {
                        firebase.initializeApp(window.DefaultConfig.firebase);
                    }
                    this.auth = firebase.auth();
                    this.auth.onAuthStateChanged((user) => {
                        if (user) {
                            const name = localStorage.getItem('chatDisplayName') || user.displayName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                            if (this.currentUserNameEl) this.currentUserNameEl.textContent = name;
                        } else {
                            if (this.currentUserNameEl) this.currentUserNameEl.textContent = '–ì–æ—Å—Ç—å';
                        }
                    });
                }
            } catch (e) {
                console.warn('Firebase init warning:', e);
            }
        }
    }

    clearChat() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç?')) {
            this.chatMessages.innerHTML = '';
            this.messages = [];
            this.welcomeSection.style.display = 'flex';
        }
    }

    // --- RAG KB methods ---
    addToKnowledgeBase() {
        const text = (this.kbInput?.value || '').trim();
        if (!text) {
            this.showNotification('–î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π', 'warning');
            return;
        }
        const chunks = text.split(/\n\s*\n/).map(s => s.trim()).filter(Boolean);
        const kb = JSON.parse(localStorage.getItem('chatKB') || '[]');
        chunks.forEach(c => kb.push({ id: 'kb_' + Date.now() + '_' + Math.random().toString(36).slice(2), text: c }));
        localStorage.setItem('chatKB', JSON.stringify(kb));
        if (this.kbInput) this.kbInput.value = '';
        this.showNotification(`–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É: ${chunks.length} —Ñ—Ä–∞–≥–º.`, 'success');
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏
        if (this.vectorIndex) this.buildVectorIndex(true);
    }

    async buildVectorIndex(silent = false) {
        try {
            if (!window.transformers) {
                this.showNotification('–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ embeddings –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞', 'error');
                return;
            }
            const { pipeline } = window.transformers;
            if (!this.embedder) {
                // –õ–µ–≥–∫–∞—è –º–æ–¥–µ–ª—å; –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
                this.embedder = await pipeline('feature-extraction', 'Xenova/all-MiniLM-L6-v2');
            }
            const dragonKnowledge = this.dragonKnowledge.getAllKnowledgeForRAG();
            const userKB = JSON.parse(localStorage.getItem('chatKB') || '[]');
            const allKB = [...dragonKnowledge, ...userKB];
            const docs = allKB.map(d => ({ id: d.id || ('doc_' + Math.random().toString(36).slice(2)), text: d.text.slice(0, 2000) }));
            const batchSize = 16;
            const vectors = [];
            for (let i = 0; i < docs.length; i += batchSize) {
                const batch = docs.slice(i, i + batchSize);
                const emb = await this.embedder(batch.map(b => b.text), { pooling: 'mean', normalize: true });
                // emb –º–æ–∂–µ—Ç –±—ã—Ç—å Tensor —Å dims [B, D] –∏ data Float32Array
                if (emb && emb.data && emb.dims && emb.dims.length === 2) {
                    const B = emb.dims[0], D = emb.dims[1];
                    for (let bi = 0; bi < B; bi++) {
                        const vec = Array.from(emb.data.slice(bi * D, (bi + 1) * D));
                        vectors.push({ id: batch[bi].id, text: batch[bi].text, vec });
                    }
                } else if (Array.isArray(emb)) {
                    emb.forEach((e, idx) => {
                        const vec = e.data ? Array.from(e.data) : (Array.isArray(e) ? e : []);
                        vectors.push({ id: batch[idx].id, text: batch[idx].text, vec });
                    });
                }
            }
            this.vectorIndex = vectors;
            if (!silent) this.showNotification(`–ü–æ—Å—Ç—Ä–æ–µ–Ω –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å: ${vectors.length} —Ñ—Ä–∞–≥–º.`, 'success');
        } catch (e) {
            console.warn('Vector index build error', e);
            this.showNotification('–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞', 'error');
        }
    }

    retrieveKnowledgeContext(query, topK = 4) {
        // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞–Ω–∏—è –∏–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –±–∞–∑—ã Dragon
        const dragonKnowledge = this.dragonKnowledge.getAllKnowledgeForRAG();
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è
        const userKB = JSON.parse(localStorage.getItem('chatKB') || '[]');
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∑–Ω–∞–Ω–∏—è
        const allKB = [...dragonKnowledge, ...userKB];
        if (!allKB.length) return '';
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –ø–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º
        if (this.vectorIndex && window.transformers) {
            const q = query.slice(0, 1000);
            return this.semanticSearchContext(q, topK);
        }
        
        // –§–æ–ª–±—ç–∫: TF-IDF
        const tokenize = s => s.toLowerCase().replace(/[^\p{L}\p{N}\s]/gu, ' ').split(/\s+/).filter(Boolean);
        const qTokens = tokenize(query);
        if (!qTokens.length) return '';
        
        const idfMap = new Map();
        allKB.forEach(doc => { 
            const terms = new Set(tokenize(doc.text)); 
            terms.forEach(t => idfMap.set(t, (idfMap.get(t) || 0) + 1)); 
        });
        
        const N = allKB.length;
        const idf = (t) => Math.log(1 + N / ((idfMap.get(t) || 0) + 1));
        const qVec = new Map();
        qTokens.forEach(t => qVec.set(t, (qVec.get(t) || 0) + 1));
        qVec.forEach((v, t) => qVec.set(t, v * idf(t)));
        
        const dot = (a, b) => { let s = 0; a.forEach((av, t) => { const bv = b.get(t) || 0; s += av * bv; }); return s; };
        const norm = (a) => Math.sqrt(Array.from(a.values()).reduce((s, v) => s + v * v, 0));
        
        const scored = allKB.map(doc => {
            const tfs = new Map();
            tokenize(doc.text).forEach(t => tfs.set(t, (tfs.get(t) || 0) + 1));
            tfs.forEach((v, t) => tfs.set(t, v * idf(t)));
            const score = dot(qVec, tfs) / ((norm(qVec) * norm(tfs)) || 1);
            return { score, text: doc.text, source: doc.id ? (doc.id.startsWith('dragon_') ? 'Dragon Knowledge' : 'User Knowledge') : 'Unknown' };
        }).sort((a, b) => b.score - a.score).slice(0, topK);
        
        if (!scored.length || scored[0].score <= 0) return '';
        const context = scored.map((s, i) => `–ö–æ–Ω—Ç–µ–∫—Å—Ç ${i + 1} (${s.source}):\n${s.text}`).join('\n\n');
        return `–ù–∏–∂–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π Dragon –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π –∏—Ö –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ:\n\n${context}`;
    }

    // –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É
    async semanticSearchContext(query, topK = 4) {
        try {
            const { pipeline } = window.transformers;
            if (!this.embedder) {
                this.embedder = await pipeline('feature-extraction', 'Xenova/all-MiniLM-L6-v2');
            }
            const emb = await this.embedder(query);
            const tensor = emb[0] ? emb : [emb];
            const qVec = tensor.mean ? Array.from(tensor.mean(1).dataSync ? tensor.mean(1).dataSync() : tensor.mean(1).data) : Array.from(tensor[0]);

            const dot = (a, b) => a.reduce((s, v, i) => s + v * b[i], 0);
            const norm = (a) => Math.sqrt(a.reduce((s, v) => s + v * v, 0));
            const qn = norm(qVec) || 1;

            const scored = this.vectorIndex
                .map(d => ({
                    score: dot(qVec, d.vec) / ((qn * (Math.sqrt(d.vec.reduce((s, v) => s + v * v, 0)) || 1))),
                    text: d.text,
                    source: d.id?.startsWith('dragon_') ? 'Dragon Knowledge' : 'User Knowledge'
                }))
                .sort((a, b) => b.score - a.score)
                .slice(0, topK);

            if (!scored.length) return '';
            const context = scored.map((s, i) => `–ö–æ–Ω—Ç–µ–∫—Å—Ç ${i + 1} (${s.source}):\n${s.text}`).join('\n\n');
            return `–ù–∏–∂–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π Dragon –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π –∏—Ö –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ:\n\n${context}`;
        } catch (e) {
            console.warn('semanticSearchContext error', e);
            return '';
        }
    }

    showNotification(message, type = 'info') {
        // Create notification element
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.textContent = message;
        
        // Style the notification
        Object.assign(notification.style, {
            position: 'fixed',
            top: '20px',
            right: '20px',
            padding: '1rem 1.5rem',
            borderRadius: '10px',
            color: 'white',
            fontWeight: '600',
            zIndex: '10000',
            animation: 'slideInRight 0.3s ease',
            maxWidth: '300px',
            wordWrap: 'break-word'
        });
        
        // Set background color based on type
        const colors = {
            success: '#10b981',
            error: '#ef4444',
            warning: '#f59e0b',
            info: '#3b82f6'
        };
        notification.style.background = colors[type] || colors.info;
        
        document.body.appendChild(notification);
        
        // Remove notification after 3 seconds
        setTimeout(() => {
            notification.style.animation = 'slideOutRight 0.3s ease';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }

    // Save QA pair into KB as text chunks for RAG
    savePairToKB(question, answer, tag) {
        const kb = JSON.parse(localStorage.getItem('chatKB') || '[]');
        const entry = `–¢–∏–ø: ${tag}\n–í–æ–ø—Ä–æ—Å: ${question}\n–û—Ç–≤–µ—Ç: ${answer}`;
        kb.push({ id: 'kb_pair_' + Date.now() + '_' + Math.random().toString(36).slice(2), text: entry });
        localStorage.setItem('chatKB', JSON.stringify(kb));
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π Dragon
    showRandomFact() {
        const fact = this.dragonKnowledge.getRandomFact();
        this.addMessage(`üêâ **–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π Dragon:**\n\n**${fact.question}**\n\n${fact.answer}`, 'assistant');
    }

    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–µ–∑–Ω–æ–π KB –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    preloadKBIfEmpty() {
        const existing = JSON.parse(localStorage.getItem('chatKB') || '[]');
        if (existing.length) return;
        const seed = [
            { t: '–®–∞–±–ª–æ–Ω HTML —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
              c: `–°—Ç–∞—Ä—Ç–æ–≤—ã–π HTML-—à–∞–±–ª–æ–Ω:

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title>–°—Ç–∞—Ä—Ç</title>
  <style>body{font-family:Arial;margin:40px}</style>
</head>
<body>
  <h1>–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!</h1>
  <p>–≠—Ç–æ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω.</p>
</body>
</html>` },
            { t: 'JavaScript: –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –±–µ–∑ –∫–ª—é—á–µ–π',
              c: `Open-Meteo –ø—Ä–∏–º–µ—Ä (–±–µ–∑ API –∫–ª—é—á–µ–π):

```javascript
async function getWeather(lat=55.75, lon=37.62) {
  const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true&timezone=auto`;
  const r = await fetch(url);
  const data = await r.json();
  return data.current_weather;
}
getWeather().then(console.log);
``` ` },
            { t: 'Node.js Express —Å–µ—Ä–≤–µ—Ä-—à–∞–±–ª–æ–Ω',
              c: `–ú–∏–Ω–∏-—Å–µ—Ä–≤–µ—Ä:

```javascript
const express = require('express');
const app = express();
app.use(express.json());
app.get('/ping', (req, res) => res.json({ ok: true }));
app.listen(3000, () => console.log('http://localhost:3000'));
``` ` },
            { t: 'CSS: –±–∞–∑–æ–≤—ã–π responsive –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä',
              c: `CSS –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:

```css
.container{max-width:960px;margin:0 auto;padding:0 16px}
@media (max-width:600px){.container{padding:0 10px}}
``` ` }
        ];
        const kb = seed.map(s => ({ id: 'seed_' + Math.random().toString(36).slice(2), text: `–¢–µ–º–∞: ${s.t}
${s.c}` }));
        localStorage.setItem('chatKB', JSON.stringify(kb));
        this.showNotification('–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π', 'success');
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    showKnowledgeStats() {
        const stats = this.dragonKnowledge.getStats();
        const userKB = JSON.parse(localStorage.getItem('chatKB') || '[]');
        
        let statsMessage = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π Dragon:**\n\n`;
        statsMessage += `**–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –±–∞–∑–∞ Dragon:**\n`;
        statsMessage += `‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${stats.totalCategories}\n`;
        statsMessage += `‚Ä¢ –í—Å–µ–≥–æ –∑–Ω–∞–Ω–∏–π: ${stats.totalItems}\n\n`;
        
        statsMessage += `**–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:**\n`;
        Object.keys(stats.categoryBreakdown).forEach(category => {
            const emoji = this.getCategoryEmoji(category);
            statsMessage += `${emoji} ${category}: ${stats.categoryBreakdown[category]} –∑–Ω–∞–Ω–∏–π\n`;
        });
        
        statsMessage += `\n**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –±–∞–∑–∞:**\n`;
        statsMessage += `‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤–∞–º–∏: ${userKB.length} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤\n`;
        
        statsMessage += `\n**–û–±—â–∏–π –æ–±—ä–µ–º –∑–Ω–∞–Ω–∏–π:** ${stats.totalItems + userKB.length} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤`;
        
        this.addMessage(statsMessage, 'assistant');
    }

    // –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    getCategoryEmoji(category) {
        const emojis = {
            'programming': 'üíª',
            'ai': 'ü§ñ',
            'business': 'üíº',
            'science': 'üî¨',
            'health': 'üè•',
            'education': 'üìö',
            'communication': 'üí¨',
            'history': 'üèõÔ∏è',
            'geography': 'üåç',
            'psychology': 'üß†',
            'technology': '‚ö°',
            'philosophy': 'ü§î',
            'cooking': 'üç≥',
            'fitness': 'üí™',
            'art': 'üé®'
        };
        return emojis[category] || 'üìñ';
    }

    // –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
    searchInKnowledge(query) {
        const results = this.dragonKnowledge.searchKnowledge(query);
        
        if (results.length === 0) {
            this.addMessage(`üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π Dragon. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.`, 'assistant');
            return;
        }
        
        let searchMessage = `üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π Dragon:**\n\n`;
        
        results.slice(0, 3).forEach((result, index) => {
            const emoji = this.getCategoryEmoji(result.category);
            searchMessage += `**${index + 1}. ${emoji} ${result.question}**\n`;
            searchMessage += `${result.answer}\n\n`;
        });
        
        if (results.length > 3) {
            searchMessage += `*... –∏ –µ—â–µ ${results.length - 3} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤*`;
        }
        
        this.addMessage(searchMessage, 'assistant');
    }
}

// Add CSS animations for notifications
const style = document.createElement('style');
style.textContent = `
    @keyframes slideInRight {
        from {
            opacity: 0;
            transform: translateX(100%);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }
    
    @keyframes slideOutRight {
        from {
            opacity: 1;
            transform: translateX(0);
        }
        to {
            opacity: 0;
            transform: translateX(100%);
        }
    }
`;
document.head.appendChild(style);

// Initialize the chat application when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    new ChatApp();
});
