// Dragon Knowledge Base - Встроенная база знаний для ИИ Чат Dragon
class DragonKnowledgeBase {
    constructor() {
        this.knowledge = {
            // Программирование и разработка
            programming: [
                {
                    question: "Как создать веб-сайт?",
                    answer: "Для создания веб-сайта используйте:\n\n1. **HTML** - структура страницы\n2. **CSS** - стили и дизайн\n3. **JavaScript** - интерактивность\n\n**Популярные фреймворки:**\n- React, Vue.js, Angular (фронтенд)\n- Node.js, Python Django, PHP Laravel (бэкенд)\n\n**Быстрый старт:**\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Мой сайт</title>\n</head>\n<body>\n    <h1>Привет, мир!</h1>\n</body>\n</html>\n```"
                },
                {
                    question: "Как изучить программирование?",
                    answer: "**Пошаговый план изучения программирования:**\n\n1. **Выберите язык:** Python (легкий), JavaScript (веб), Java (универсальный)\n2. **Основы:** переменные, циклы, условия, функции\n3. **Практика:** решайте задачи на LeetCode, HackerRank\n4. **Проекты:** создавайте реальные приложения\n5. **Сообщество:** GitHub, Stack Overflow, форумы\n\n**Рекомендуемые ресурсы:**\n- freeCodeCamp, Codecademy, Coursera\n- YouTube каналы по программированию\n- Книги: 'Чистый код', 'Алгоритмы'"
                },
                {
                    question: "Что такое API?",
                    answer: "**API (Application Programming Interface)** - это интерфейс для взаимодействия между программами.\n\n**Типы API:**\n- REST API (HTTP запросы)\n- GraphQL (гибкие запросы)\n- WebSocket (реальное время)\n\n**Пример REST API:**\n```javascript\n// GET запрос\nfetch('https://api.example.com/users')\n  .then(response => response.json())\n  .then(data => console.log(data));\n\n// POST запрос\nfetch('https://api.example.com/users', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({ name: 'Иван', email: 'ivan@example.com' })\n});\n```"
                }
            ],

            // Искусственный интеллект и машинное обучение
            ai: [
                {
                    question: "Что такое машинное обучение?",
                    answer: "**Машинное обучение (ML)** - это подраздел ИИ, где компьютеры учатся на данных без явного программирования.\n\n**Типы ML:**\n- **Обучение с учителем** - есть правильные ответы\n- **Обучение без учителя** - поиск паттернов в данных\n- **Обучение с подкреплением** - обучение через взаимодействие\n\n**Популярные библиотеки:**\n- **Python:** scikit-learn, TensorFlow, PyTorch\n- **R:** caret, randomForest\n\n**Пример простой модели:**\n```python\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\n# Данные\nX = np.array([[1], [2], [3], [4]])\ny = np.array([2, 4, 6, 8])\n\n# Модель\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Предсказание\nprediction = model.predict([[5]])\nprint(f'Предсказание: {prediction[0]}')  # 10\n```"
                },
                {
                    question: "Как работает нейронная сеть?",
                    answer: "**Нейронная сеть** имитирует работу мозга с помощью взаимосвязанных узлов (нейронов).\n\n**Структура:**\n- **Входной слой** - получает данные\n- **Скрытые слои** - обрабатывают информацию\n- **Выходной слой** - выдает результат\n\n**Процесс обучения:**\n1. **Прямое распространение** - данные проходят через сеть\n2. **Вычисление ошибки** - сравнение с правильным ответом\n3. **Обратное распространение** - корректировка весов\n4. **Повторение** - до достижения точности\n\n**Пример с TensorFlow:**\n```python\nimport tensorflow as tf\n\n# Создание модели\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\n# Компиляция\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Обучение\nmodel.fit(X_train, y_train, epochs=10)\n```"
                }
            ],

            // Бизнес и стартапы
            business: [
                {
                    question: "Как создать стартап?",
                    answer: "**Пошаговый план создания стартапа:**\n\n1. **Идея и валидация:**\n   - Найдите проблему, которую нужно решить\n   - Изучите рынок и конкурентов\n   - Проведите интервью с потенциальными клиентами\n\n2. **MVP (Минимально жизнеспособный продукт):**\n   - Создайте простую версию продукта\n   - Протестируйте на реальных пользователях\n   - Соберите обратную связь\n\n3. **Финансирование:**\n   - Бутстрэппинг (собственные средства)\n   - Инвесторы (ангелы, венчурные фонды)\n   - Краудфандинг\n\n4. **Команда:**\n   - Найдите соучредителей\n   - Нанять ключевых сотрудников\n   - Создайте корпоративную культуру\n\n5. **Масштабирование:**\n   - Оптимизируйте процессы\n   - Расширяйте команду\n   - Выходите на новые рынки"
                },
                {
                    question: "Как привлечь инвестиции?",
                    answer: "**Стратегия привлечения инвестиций:**\n\n**1. Подготовка:**\n- Создайте убедительный pitch deck\n- Подготовьте бизнес-план\n- Соберите команду с опытом\n\n**2. Типы инвесторов:**\n- **Бизнес-ангелы** - частные инвесторы (10K-500K$)\n- **Венчурные фонды** - институциональные (500K-10M$)\n- **Корпоративные инвесторы** - стратегические партнеры\n\n**3. Pitch deck должен включать:**\n- Проблема и решение\n- Размер рынка (TAM, SAM, SOM)\n- Бизнес-модель\n- Финансовые прогнозы\n- Команда\n- Использование средств\n\n**4. Сеть и рекомендации:**\n- Посещайте стартап-мероприятия\n- Используйте LinkedIn\n- Получите рекомендации от других предпринимателей"
                }
            ],

            // Наука и технологии
            science: [
                {
                    question: "Что такое квантовые компьютеры?",
                    answer: "**Квантовые компьютеры** используют принципы квантовой механики для обработки информации.\n\n**Ключевые концепции:**\n- **Кубиты** - квантовые биты (0, 1 или суперпозиция)\n- **Суперпозиция** - кубит может быть в нескольких состояниях одновременно\n- **Запутанность** - связь между кубитами\n- **Квантовое туннелирование** - преодоление барьеров\n\n**Преимущества:**\n- Экспоненциальное ускорение для определенных задач\n- Факторизация больших чисел (криптография)\n- Оптимизация и симуляции\n\n**Ограничения:**\n- Квантовая декогеренция\n- Сложность программирования\n- Высокая стоимость\n\n**Применения:**\n- Криптография и безопасность\n- Финансовое моделирование\n- Исследования лекарств\n- Искусственный интеллект"
                },
                {
                    question: "Как работает блокчейн?",
                    answer: "**Блокчейн** - это распределенная база данных, где данные хранятся в блоках, связанных криптографически.\n\n**Принципы работы:**\n1. **Децентрализация** - нет единого центра управления\n2. **Неизменяемость** - данные нельзя изменить\n3. **Прозрачность** - все транзакции видны\n4. **Консенсус** - согласие участников сети\n\n**Типы блокчейнов:**\n- **Публичные** - Bitcoin, Ethereum (открытые)\n- **Приватные** - корпоративные решения\n- **Гибридные** - комбинация подходов\n\n**Применения:**\n- Криптовалюты (Bitcoin, Ethereum)\n- Смарт-контракты\n- Цифровая идентификация\n- Цепочки поставок\n- NFT и метавселенные\n\n**Пример смарт-контракта (Solidity):**\n```solidity\ncontract SimpleStorage {\n    uint256 public storedData;\n    \n    function set(uint256 x) public {\n        storedData = x;\n    }\n    \n    function get() public view returns (uint256) {\n        return storedData;\n    }\n}\n```"
                }
            ],

            // Здоровье и медицина
            health: [
                {
                    question: "Как поддерживать здоровый образ жизни?",
                    answer: "**Основы здорового образа жизни:**\n\n**1. Питание:**\n- Сбалансированная диета (белки, углеводы, жиры)\n- 5-7 порций овощей и фруктов в день\n- Пить 2-3 литра воды\n- Ограничить сахар, соль, обработанные продукты\n\n**2. Физическая активность:**\n- 150 минут умеренной активности в неделю\n- Силовые тренировки 2-3 раза в неделю\n- Ходьба, бег, плавание, велосипед\n- Растяжка и йога\n\n**3. Сон:**\n- 7-9 часов качественного сна\n- Регулярный режим сна\n- Темная, прохладная комната\n- Избегать экранов перед сном\n\n**4. Стресс-менеджмент:**\n- Медитация и дыхательные упражнения\n- Хобби и творчество\n- Социальные связи\n- Профессиональная помощь при необходимости"
                },
                {
                    question: "Как укрепить иммунитет?",
                    answer: "**Способы укрепления иммунитета:**\n\n**1. Питание:**\n- **Витамин C:** цитрусовые, киви, болгарский перец\n- **Витамин D:** рыба, яйца, солнечный свет\n- **Цинк:** мясо, орехи, семена\n- **Пробиотики:** йогурт, кефир, квашеная капуста\n\n**2. Образ жизни:**\n- Регулярные физические упражнения\n- Качественный сон (7-9 часов)\n- Управление стрессом\n- Отказ от курения и алкоголя\n\n**3. Гигиена:**\n- Частое мытье рук\n- Избегание контакта с больными\n- Вакцинация\n- Проветривание помещений\n\n**4. Дополнительно:**\n- Закаливание (контрастный душ)\n- Массаж и релаксация\n- Положительные эмоции\n- Регулярные медицинские осмотры"
                }
            ],

            // Образование и саморазвитие
            education: [
                {
                    question: "Как эффективно учиться?",
                    answer: "**Методы эффективного обучения:**\n\n**1. Активные методы:**\n- **Техника Фейнмана** - объясните материал простыми словами\n- **Интервальное повторение** - повторяйте через увеличивающиеся интервалы\n- **Практическое применение** - используйте знания в реальных проектах\n\n**2. Организация времени:**\n- **Техника Помодоро** - 25 минут учебы, 5 минут отдыха\n- **Планирование** - составьте расписание\n- **Приоритизация** - сосредоточьтесь на важном\n\n**3. Множественные каналы:**\n- Чтение + аудио + видео\n- Конспекты + схемы + карты памяти\n- Групповое обучение + самостоятельная работа\n\n**4. Мотивация:**\n- Ставьте конкретные цели\n- Отмечайте прогресс\n- Найдите практическое применение\n- Создайте поддерживающее окружение"
                },
                {
                    question: "Как развить креативность?",
                    answer: "**Способы развития креативности:**\n\n**1. Практические упражнения:**\n- **Мозговой штурм** - генерируйте идеи без критики\n- **Метод SCAMPER** - Substitute, Combine, Adapt, Modify, Put to other uses, Eliminate, Reverse\n- **Шесть шляп мышления** - разные подходы к проблеме\n\n**2. Образ жизни:**\n- Изучайте новые области знаний\n- Путешествуйте и знакомьтесь с разными культурами\n- Занимайтесь искусством и творчеством\n- Читайте разнообразную литературу\n\n**3. Окружение:**\n- Общайтесь с креативными людьми\n- Создайте вдохновляющее рабочее пространство\n- Слушайте музыку разных жанров\n- Посещайте выставки и мероприятия\n\n**4. Техники:**\n- **Медитация** - очистите разум\n- **Дневник идей** - записывайте все мысли\n- **Игра** - подходите к задачам как к игре\n- **Ограничения** - они стимулируют креативность"
                }
            ],

            // Общение и приветствия
            communication: [
                {
                    question: "Привет",
                    answer: "🐉 **Привет! Добро пожаловать в Dragon Chat!**\n\nЯ ваш ИИ-ассистент Dragon, готовый помочь с любыми вопросами! У меня есть обширная база знаний по:\n\n💻 **Программированию** - создание сайтов, изучение языков\n🤖 **Искусственному интеллекту** - машинное обучение, нейронные сети\n💼 **Бизнесу** - стартапы, инвестиции\n🔬 **Науке** - квантовые компьютеры, блокчейн\n🏥 **Здоровью** - здоровый образ жизни\n📚 **Образованию** - эффективное обучение\n\n**Попробуйте команды:**\n• `/факт` - интересный факт\n• `/поиск [тема]` - поиск в базе знаний\n• `/помощь` - все команды\n\n**Что вас интересует?** 😊"
                },
                {
                    question: "Здравствуй",
                    answer: "🐉 **Здравствуйте! Рад вас видеть!**\n\nЯ Dragon - ваш умный помощник с встроенной базой знаний. Могу помочь с:\n\n**💡 Быстрыми ответами** на любые вопросы\n**💻 Написанием кода** на разных языках\n**📖 Объяснением сложных тем** простыми словами\n**🔍 Поиском информации** в моей базе знаний\n\n**Примеры того, что я умею:**\n• Создать веб-сайт с нуля\n• Объяснить машинное обучение\n• Помочь с бизнес-планом\n• Рассказать о здоровом образе жизни\n\n**С чего начнем?** 🚀"
                },
                {
                    question: "Сделай код",
                    answer: "💻 **Конечно! Я помогу написать код!**\n\n**Что именно нужно создать?** Вот несколько примеров:\n\n**🌐 Веб-сайт:**\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Мой сайт</title>\n    <style>\n        body { font-family: Arial; margin: 40px; }\n        h1 { color: #333; }\n    </style>\n</head>\n<body>\n    <h1>Добро пожаловать!</h1>\n    <p>Это мой первый сайт!</p>\n</body>\n</html>\n```\n\n**🐍 Python скрипт:**\n```python\n# Простой калькулятор\ndef calculator(a, b, operation):\n    if operation == '+':\n        return a + b\n    elif operation == '-':\n        return a - b\n    elif operation == '*':\n        return a * b\n    elif operation == '/':\n        return a / b if b != 0 else \"Ошибка: деление на ноль\"\n\n# Пример использования\nresult = calculator(10, 5, '+')\nprint(f\"Результат: {result}\")\n```\n\n**📱 JavaScript функция:**\n```javascript\n// Функция для валидации email\nfunction validateEmail(email) {\n    const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return regex.test(email);\n}\n\n// Пример использования\nconsole.log(validateEmail('test@example.com')); // true\n```\n\n**Уточните, какой именно код нужен, и я создам его для вас!** 🚀"
                },
                {
                    question: "Напиши код",
                    answer: "💻 **С удовольствием напишу код!**\n\n**Выберите тип кода или опишите задачу:**\n\n**🎯 Популярные варианты:**\n• **Веб-сайт** (HTML/CSS/JavaScript)\n• **Python скрипт** (автоматизация, анализ данных)\n• **JavaScript функция** (интерактивность)\n• **SQL запрос** (работа с базами данных)\n• **API интеграция** (связь с внешними сервисами)\n\n**📝 Просто опишите:**\n• Что должен делать код\n• На каком языке программирования\n• Какие данные обрабатывать\n• Какой результат ожидается\n\n**Примеры запросов:**\n• \"Создай калькулятор на JavaScript\"\n• \"Напиши Python скрипт для чтения CSV файла\"\n• \"Сделай форму регистрации на HTML\"\n• \"Создай API для работы с пользователями\"\n\n**Опишите вашу задачу, и я создам готовый код с объяснениями!** 🚀"
                },
                {
                    question: "Помоги с кодом",
                    answer: "💻 **Конечно помогу с кодом!**\n\n**Я могу помочь с:**\n\n**🔧 Отладкой:**\n• Найти ошибки в коде\n• Исправить синтаксические проблемы\n• Оптимизировать производительность\n\n**📚 Обучением:**\n• Объяснить сложные концепции\n• Показать лучшие практики\n• Предложить альтернативные решения\n\n**🚀 Разработкой:**\n• Создать код с нуля\n• Добавить новые функции\n• Интегрировать с API\n\n**💡 Советами:**\n• Выбрать подходящий язык\n• Структурировать проект\n• Использовать правильные библиотеки\n\n**Просто:**\n1. **Покажите код** или опишите проблему\n2. **Укажите язык** программирования\n3. **Объясните**, что должно происходить\n4. **Получите решение** с подробными комментариями\n\n**Готов помочь! Покажите код или опишите задачу!** 🛠️"
                }
            ],

            // История и культура
            history: [
                {
                    question: "Расскажи о Древнем Египте",
                    answer: "🏺 **Древний Египет - одна из величайших цивилизаций:**\n\n**⏰ Временные рамки:**\n• Древнее царство (2686-2181 до н.э.) - эпоха пирамид\n• Среднее царство (2055-1650 до н.э.) - расцвет культуры\n• Новое царство (1550-1069 до н.э.) - имперская эпоха\n\n**🏗️ Достижения:**\n• **Пирамиды** - математически точные сооружения\n• **Иероглифы** - одна из первых письменностей\n• **Мумификация** - сохранение тел для загробной жизни\n• **Календарь** - 365-дневный солнечный календарь\n\n**👑 Знаменитые фараоны:**\n• **Хеопс** - строитель Великой пирамиды\n• **Хатшепсут** - женщина-фараон\n• **Тутанхамон** - \"золотой фараон\"\n• **Рамзес II** - \"Великий\"\n\n**🔬 Наука и медицина:**\n• Анатомические знания\n• Хирургические инструменты\n• Математические расчеты\n• Астрономические наблюдения"
                },
                {
                    question: "Что такое Ренессанс?",
                    answer: "🎨 **Ренессанс - эпоха Возрождения (XIV-XVI века):**\n\n**🌍 География:**\n• Начался в Италии (Флоренция, Венеция, Рим)\n• Распространился по всей Европе\n• \"Золотой век\" искусства и науки\n\n**🎭 Основные черты:**\n• **Гуманизм** - человек в центре внимания\n• **Возрождение античности** - изучение греко-римской культуры\n• **Научный прогресс** - эмпирические исследования\n• **Индивидуализм** - развитие личности\n\n**👨‍🎨 Великие мастера:**\n• **Леонардо да Винчи** - универсальный гений\n• **Микеланджело** - скульптор и живописец\n• **Рафаэль** - мастер гармонии\n• **Донателло** - скульптор\n\n**🔬 Научные открытия:**\n• Гелиоцентрическая система (Коперник)\n• Анатомия человека (Везалий)\n• Перспектива в живописи\n• Печатный станок (Гутенберг)"
                },
                {
                    question: "Кто такой Наполеон Бонапарт?",
                    answer: "👑 **Наполеон Бонапарт (1769-1821) - император Франции:**\n\n**📈 Путь к власти:**\n• Родился на Корсике в небогатой семье\n• Военная академия в Париже\n• Блестящие победы в Италии и Египте\n• Переворот 18 брюмера (1799)\n• Провозглашение императором (1804)\n\n**⚔️ Военные кампании:**\n• **Аустерлиц** (1805) - \"битва трех императоров\"\n• **Йена-Ауэрштедт** (1806) - разгром Пруссии\n• **Фридланд** (1807) - победа над Россией\n• **Ваграм** (1809) - победа над Австрией\n\n**🏛️ Реформы:**\n• **Кодекс Наполеона** - гражданское право\n• **Банк Франции** - финансовая система\n• **Лицеи** - система образования\n• **Метрическая система** - унификация мер\n\n**📉 Падение:**\n• Война с Россией (1812) - катастрофа\n• Лейпциг (1813) - \"битва народов\"\n• Отречение и ссылка на Эльбу\n• Ватерлоо (1815) - окончательное поражение"
                }
            ],

            // География и природа
            geography: [
                {
                    question: "Какие самые высокие горы в мире?",
                    answer: "🏔️ **Самые высокие горы мира:**\n\n**🥇 Топ-10 вершин:**\n1. **Эверест** (8848 м) - Непал/Китай\n2. **К2** (8611 м) - Пакистан/Китай\n3. **Канченджанга** (8586 м) - Непал/Индия\n4. **Лхоцзе** (8516 м) - Непал/Китай\n5. **Макалу** (8485 м) - Непал/Китай\n6. **Чо-Ойю** (8188 м) - Непал/Китай\n7. **Дхаулагири** (8167 м) - Непал\n8. **Манаслу** (8163 м) - Непал\n9. **Нанга-Парбат** (8126 м) - Пакистан\n10. **Аннапурна** (8091 м) - Непал\n\n**🌍 География:**\n• Все находятся в **Гималаях** и **Каракоруме**\n• **\"Зона смерти\"** - выше 8000 м\n• Экстремальные условия: холод, ветер, разреженный воздух\n\n**🧗‍♂️ Альпинизм:**\n• **Эверест** - самая популярная вершина\n• **К2** - самая опасная (\"Дикая гора\")\n• **Аннапурна** - самая смертоносная\n• Требуют специальной подготовки и снаряжения"
                },
                {
                    question: "Расскажи о Великом Барьерном рифе",
                    answer: "🐠 **Великий Барьерный риф - крупнейшая коралловая система:**\n\n**📍 Расположение:**\n• **Австралия** - северо-восточное побережье\n• **2300 км** в длину\n• **344,400 км²** общей площади\n• Виден из космоса невооруженным глазом\n\n**🌊 Экосистема:**\n• **400 видов кораллов**\n• **1500 видов рыб**\n• **4000 видов моллюсков**\n• **240 видов птиц**\n• **6 видов морских черепах**\n\n**🐋 Знаменитые обитатели:**\n• **Рыба-клоун** (Немо)\n• **Морские черепахи**\n• **Дюгони** (морские коровы)\n• **Китовые акулы**\n• **Морские крокодилы**\n\n**⚠️ Угрозы:**\n• **Изменение климата** - повышение температуры воды\n• **Закисление океана**\n• **Загрязнение** от сельского хозяйства\n• **Туризм** - физическое воздействие\n• **Морская звезда \"терновый венец\"** - поедает кораллы"
                },
                {
                    question: "Что такое Северное сияние?",
                    answer: "🌌 **Северное сияние (Аврора Бореалис) - природное световое шоу:**\n\n**🔬 Научное объяснение:**\n• **Солнечный ветер** - поток заряженных частиц от Солнца\n• **Магнитное поле Земли** направляет частицы к полюсам\n• **Столкновение** с атомами кислорода и азота в атмосфере\n• **Высвобождение энергии** в виде света\n\n**🎨 Цвета:**\n• **Зеленый** - кислород на высоте 100-300 км\n• **Красный** - кислород на высоте 300+ км\n• **Синий/Фиолетовый** - азот на высоте 100+ км\n• **Желтый** - смесь красного и зеленого\n\n**📍 Где наблюдать:**\n• **Арктика** - Норвегия, Швеция, Финляндия, Исландия\n• **Аляска** и **Канада**\n• **Россия** - Мурманск, Якутия\n• **Антарктида** - Южное сияние\n\n**⏰ Лучшее время:**\n• **Зима** - длинные ночи\n• **22:00-02:00** - пик активности\n• **Ясная погода** - без облаков\n• **Высокая солнечная активность** - больше шансов"
                }
            ],

            // Психология и отношения
            psychology: [
                {
                    question: "Как справиться со стрессом?",
                    answer: "🧘 **Эффективные способы борьбы со стрессом:**\n\n**💨 Дыхательные техники:**\n• **4-7-8 дыхание** - вдох 4 сек, задержка 7 сек, выдох 8 сек\n• **Диафрагмальное дыхание** - глубокие вдохи животом\n• **Медитация** - 10-15 минут в день\n\n**🏃‍♂️ Физическая активность:**\n• **Кардио** - бег, плавание, велосипед\n• **Йога** - сочетание движения и дыхания\n• **Прогулки на природе** - 30 минут в день\n• **Танцы** - освобождение эмоций\n\n**🧠 Когнитивные техники:**\n• **Рефрейминг** - изменение взгляда на ситуацию\n• **Планирование** - разбивка больших задач\n• **Приоритизация** - фокус на важном\n• **Границы** - умение говорить \"нет\"\n\n**🎯 Практические советы:**\n• **Режим сна** - 7-9 часов качественного сна\n• **Питание** - меньше кофеина и сахара\n• **Хобби** - творческие занятия\n• **Социальная поддержка** - общение с близкими"
                },
                {
                    question: "Как развить уверенность в себе?",
                    answer: "💪 **Путь к уверенности в себе:**\n\n**🎯 Постановка целей:**\n• **SMART цели** - конкретные, измеримые, достижимые\n• **Маленькие шаги** - ежедневные победы\n• **Отслеживание прогресса** - ведение дневника\n• **Празднование успехов** - даже маленьких\n\n**💭 Работа с мышлением:**\n• **Позитивный внутренний диалог** - замена негативных мыслей\n• **Визуализация успеха** - представление достижения целей\n• **Аффирмации** - позитивные утверждения\n• **Медитация** - осознанность и спокойствие\n\n**🎭 Практические навыки:**\n• **Публичные выступления** - постепенное увеличение аудитории\n• **Новые знакомства** - расширение социального круга\n• **Обучение** - приобретение новых навыков\n• **Физическая форма** - забота о теле\n\n**🤝 Социальные аспекты:**\n• **Окружение** - общение с поддерживающими людьми\n• **Менторство** - поиск наставника\n• **Волонтерство** - помощь другим\n• **Профессиональное развитие** - карьерный рост"
                },
                {
                    question: "Как улучшить память?",
                    answer: "🧠 **Техники улучшения памяти:**\n\n**🔗 Мнемонические техники:**\n• **Метод локусов** - связь информации с местами\n• **Акростихи** - первые буквы слов\n• **Рифмы и песни** - музыкальная память\n• **Визуальные образы** - яркие картинки\n\n**📚 Активные методы обучения:**\n• **Интервальное повторение** - повтор через увеличивающиеся интервалы\n• **Техника Фейнмана** - объяснение простыми словами\n• **Активное чтение** - конспекты и вопросы\n• **Практическое применение** - использование знаний\n\n**🏃‍♂️ Образ жизни:**\n• **Физические упражнения** - улучшают кровообращение мозга\n• **Качественный сон** - 7-9 часов для консолидации памяти\n• **Сбалансированное питание** - омега-3, антиоксиданты\n• **Медитация** - снижает стресс, улучшает концентрацию\n\n**🎯 Практические упражнения:**\n• **Запоминание списков** - продукты, имена, номера\n• **Изучение языков** - новые слова и фразы\n• **Игры для мозга** - кроссворды, судоку\n• **Чтение** - расширение словарного запаса"
                }
            ],

            // Технологии и инновации
            technology: [
                {
                    question: "Что такое блокчейн?",
                    answer: "⛓️ **Блокчейн - революционная технология:**\n\n**🔧 Принцип работы:**\n• **Цепочка блоков** - каждый блок содержит данные и хеш предыдущего\n• **Децентрализация** - нет единого центра управления\n• **Неизменность** - данные нельзя изменить задним числом\n• **Прозрачность** - все транзакции видны всем участникам\n\n**💡 Ключевые особенности:**\n• **Криптография** - защита данных\n• **Консенсус** - согласие участников сети\n• **P2P сеть** - равноправные узлы\n• **Отсутствие посредников** - прямые транзакции\n\n**🚀 Применения:**\n• **Криптовалюты** - Bitcoin, Ethereum\n• **Смарт-контракты** - автоматическое выполнение условий\n• **Цифровая идентичность** - защищенные документы\n• **Цепочки поставок** - отслеживание товаров\n• **Голосование** - прозрачные выборы\n\n**⚡ Преимущества:**\n• **Безопасность** - криптографическая защита\n• **Скорость** - быстрые транзакции\n• **Экономия** - меньше комиссий\n• **Доверие** - математическая гарантия"
                },
                {
                    question: "Что такое 5G?",
                    answer: "📶 **5G - пятое поколение мобильной связи:**\n\n**⚡ Основные характеристики:**\n• **Скорость** - до 10 Гбит/с (в 100 раз быстрее 4G)\n• **Задержка** - менее 1 мс (в 50 раз меньше)\n• **Пропускная способность** - в 1000 раз больше\n• **Плотность подключений** - до 1 млн устройств на км²\n\n**🌐 Технологии:**\n• **Миллиметровые волны** - высокочастотный спектр\n• **Массивные MIMO** - множественные антенны\n• **Сетевое разделение** - виртуальные сети\n• **Edge computing** - обработка на краю сети\n\n**🚀 Применения:**\n• **Интернет вещей** - умные города и дома\n• **Автономные автомобили** - мгновенная связь\n• **Виртуальная реальность** - без задержек\n• **Телемедицина** - удаленные операции\n• **Промышленность 4.0** - умные фабрики\n\n**⚠️ Вызовы:**\n• **Инфраструктура** - нужны новые вышки\n• **Стоимость** - дорогое развертывание\n• **Безопасность** - больше точек атаки\n• **Энергопотребление** - высокая нагрузка"
                },
                {
                    question: "Что такое квантовые компьютеры?",
                    answer: "⚛️ **Квантовые компьютеры - будущее вычислений:**\n\n**🔬 Квантовые принципы:**\n• **Суперпозиция** - кубит может быть 0 и 1 одновременно\n• **Запутанность** - связанные кубиты влияют друг на друга\n• **Квантовое туннелирование** - преодоление барьеров\n• **Интерференция** - усиление правильных ответов\n\n**💻 Отличия от классических:**\n• **Кубиты** вместо битов\n• **Экспоненциальная мощность** - 2^n состояний\n• **Параллельные вычисления** - все варианты одновременно\n• **Квантовые алгоритмы** - специальные методы\n\n**🎯 Применения:**\n• **Криптография** - взлом современных шифров\n• **Моделирование молекул** - разработка лекарств\n• **Оптимизация** - маршруты, финансы\n• **Искусственный интеллект** - машинное обучение\n• **Климат** - моделирование изменений\n\n**🏢 Лидеры отрасли:**\n• **IBM** - квантовые облачные сервисы\n• **Google** - квантовое превосходство\n• **Microsoft** - топологический подход\n• **IonQ** - ионные ловушки\n• **Rigetti** - гибридные системы"
                }
            ],

            // Философия и мышление
            philosophy: [
                {
                    question: "Что такое стоицизм?",
                    answer: "🏛️ **Стоицизм - философия мудрости и спокойствия:**\n\n**📚 Основные принципы:**\n• **Контроль** - фокус только на том, что в нашей власти\n• **Принятие** - спокойное отношение к неизбежному\n• **Добродетель** - мудрость, справедливость, мужество, умеренность\n• **Настоящее** - жизнь здесь и сейчас\n\n**👨‍🏫 Великие стоики:**\n• **Марк Аврелий** - \"Размышления\" императора\n• **Эпиктет** - бывший раб, ставший философом\n• **Сенека** - римский сенатор и писатель\n• **Зенон Китийский** - основатель школы\n\n**💡 Практические техники:**\n• **Утренняя рефлексия** - планирование дня\n• **Вечерняя рефлексия** - анализ прошедшего дня\n• **Негативная визуализация** - представление потерь\n• **Дихотомия контроля** - разделение на контролируемое и нет\n\n**🎯 Современное применение:**\n• **Управление стрессом** - принятие обстоятельств\n• **Лидерство** - спокойствие в кризисе\n• **Психология** - когнитивно-поведенческая терапия\n• **Спорт** - фокус на процессе, не результате"
                },
                {
                    question: "Что такое критическое мышление?",
                    answer: "🧠 **Критическое мышление - анализ и оценка информации:**\n\n**🔍 Основные навыки:**\n• **Анализ** - разложение на части\n• **Синтез** - объединение в целое\n• **Оценка** - определение качества и достоверности\n• **Интерпретация** - понимание смысла\n• **Выводы** - логические заключения\n\n**❓ Ключевые вопросы:**\n• **Что?** - факты и данные\n• **Почему?** - причины и мотивы\n• **Как?** - процессы и методы\n• **Кто?** - источники и авторитеты\n• **Когда?** - временной контекст\n• **Где?** - пространственный контекст\n\n**🚫 Логические ошибки:**\n• **Ad hominem** - атака на личность\n• **Соломенное чучело** - искажение аргументов\n• **Ложная дилемма** - только два варианта\n• **Скользкий склон** - цепочка необоснованных последствий\n• **Апелляция к авторитету** - без доказательств\n\n**💡 Практические техники:**\n• **Socratic questioning** - глубокие вопросы\n• **Метод \"5 почему\"** - поиск корневых причин\n• **Ментальные модели** - разные перспективы\n• **Доказательства** - поиск фактов и данных"
                }
            ],

            // Кулинария и питание
            cooking: [
                {
                    question: "Как приготовить идеальную пасту?",
                    answer: "🍝 **Секреты идеальной пасты:**\n\n**🥘 Основные принципы:**\n• **Большая кастрюля** - 4-6 литров воды на 500г пасты\n• **Соленая вода** - 1-2 ст.л. соли на литр\n• **Кипящая вода** - паста только в кипящую воду\n• **Не промывать** - сохранить крахмал для соуса\n\n**⏰ Время приготовления:**\n• **Al dente** - слегка твердая в центре\n• **Проверка** - за 1-2 минуты до окончания\n• **Сохранение воды** - стакан для соуса\n• **Смешивание** - паста + соус в сковороде\n\n**🍅 Классические соусы:**\n• **Карбонара** - яйца, пармезан, панчетта\n• **Болоньезе** - мясной соус с томатами\n• **Песто** - базилик, кедровые орехи, пармезан\n• **Альфредо** - сливки, масло, пармезан\n\n**💡 Профессиональные советы:**\n• **Правильная посуда** - большая сковорода для смешивания\n• **Температура** - горячая паста + горячий соус\n• **Пармезан** - добавлять в конце\n• **Оливковое масло** - капля для блеска"
                },
                {
                    question: "Как правильно варить кофе?",
                    answer: "☕ **Искусство приготовления кофе:**\n\n**🌱 Выбор зерен:**\n• **Свежесть** - обжарка не более 2-4 недель назад\n• **Помол** - непосредственно перед завариванием\n• **Качество** - арабика vs робуста\n• **Хранение** - герметичная тара, прохладное место\n\n**💧 Вода:**\n• **Температура** - 90-96°C (не кипяток!)\n• **Качество** - фильтрованная или бутилированная\n• **Пропорции** - 60г кофе на 1л воды\n• **Время** - 4-6 минут настаивания\n\n**☕ Методы заваривания:**\n• **Френч-пресс** - полный контроль времени\n• **V60** - чистота вкуса\n• **Аэропресс** - быстрота и удобство\n• **Эспрессо** - концентрированный вкус\n\n**🎯 Советы для идеального кофе:**\n• **Предварительный прогрев** - прогреть посуду\n• **Медленная заливка** - круговыми движениями\n• **Время настаивания** - не передерживать\n• **Свежесть** - пить сразу после приготовления"
                }
            ],

            // Спорт и фитнес
            fitness: [
                {
                    question: "Как начать заниматься спортом?",
                    answer: "🏃‍♂️ **Руководство для начинающих:**\n\n**🎯 Постановка целей:**\n• **SMART цели** - конкретные, измеримые, достижимые\n• **Реалистичные ожидания** - не все сразу\n• **Краткосрочные цели** - еженедельные достижения\n• **Долгосрочное видение** - где хотите быть через год\n\n**📅 Планирование:**\n• **3-4 раза в неделю** - оптимальная частота\n• **30-45 минут** - продолжительность тренировки\n• **Разминка** - 5-10 минут подготовки\n• **Заминка** - растяжка после тренировки\n\n**💪 Типы тренировок:**\n• **Кардио** - бег, велосипед, плавание\n• **Силовые** - упражнения с весом\n• **Гибкость** - йога, растяжка\n• **Функциональные** - движения для повседневной жизни\n\n**⚠️ Безопасность:**\n• **Консультация врача** - особенно после 40 лет\n• **Правильная техника** - важнее веса\n• **Постепенное увеличение** - не перегружаться\n• **Восстановление** - отдых между тренировками"
                },
                {
                    question: "Как правильно питаться при тренировках?",
                    answer: "🥗 **Питание для активного образа жизни:**\n\n**⚖️ Баланс макронутриентов:**\n• **Белки** - 1.2-2г на кг веса для роста мышц\n• **Углеводы** - основной источник энергии\n• **Жиры** - 20-35% от калорий\n• **Вода** - 2.5-3.5л в день\n\n**⏰ Время приема пищи:**\n• **До тренировки** - углеводы за 1-2 часа\n• **После тренировки** - белки + углеводы в течение 30 минут\n• **Завтрак** - сложные углеводы + белки\n• **Ужин** - легкие белки + овощи\n\n**🍎 Качественные продукты:**\n• **Белки** - курица, рыба, яйца, бобовые\n• **Углеводы** - овсянка, рис, фрукты, овощи\n• **Жиры** - орехи, авокадо, оливковое масло\n• **Витамины** - разнообразные овощи и фрукты\n\n**💡 Практические советы:**\n• **Планирование** - готовьте еду заранее\n• **Порции** - используйте ладонь как меру\n• **Гидратация** - пейте до, во время и после\n• **Добавки** - только при необходимости"
                }
            ],

            // Искусство и творчество
            art: [
                {
                    question: "Как научиться рисовать?",
                    answer: "🎨 **Основы обучения рисованию:**\n\n**✏️ Базовые навыки:**\n• **Линия** - контроль нажима и направления\n• **Форма** - геометрические основы\n• **Пропорции** - соотношение частей\n• **Перспектива** - создание глубины\n• **Свет и тень** - объем и реализм\n\n**📚 Пошаговое обучение:**\n• **Начните с простого** - геометрические фигуры\n• **Копируйте** - изучайте работы мастеров\n• **Наброски** - быстрые зарисовки\n• **Детализация** - постепенное усложнение\n• **Эксперименты** - разные техники и материалы\n\n**🛠️ Необходимые материалы:**\n• **Карандаши** - разной мягкости (H, HB, B)\n• **Бумага** - для набросков и готовых работ\n• **Ластик** - обычный и клячка\n• **Точилка** - для острого кончика\n• **Линейка** - для перспективы\n\n**💡 Советы для начинающих:**\n• **Регулярность** - рисуйте каждый день\n• **Терпение** - прогресс требует времени\n• **Наблюдение** - изучайте окружающий мир\n• **Критика** - анализируйте свои работы"
                },
                {
                    question: "Что такое композиция в искусстве?",
                    answer: "🖼️ **Композиция - основа художественного произведения:**\n\n**📐 Основные принципы:**\n• **Правило третей** - деление на 9 частей\n• **Золотое сечение** - пропорция 1:1.618\n• **Баланс** - равновесие элементов\n• **Ритм** - повторение и вариации\n• **Контраст** - противопоставление элементов\n\n**👁️ Визуальные элементы:**\n• **Точка** - центр внимания\n• **Линия** - направление взгляда\n• **Форма** - геометрические и органические\n• **Цвет** - эмоциональное воздействие\n• **Текстура** - тактильные качества\n\n**🎯 Техники композиции:**\n• **Фокус** - главный объект\n• **Фон** - поддержка основного\n• **Передний план** - введение в сцену\n• **Глубина** - создание пространства\n• **Движение** - направление взгляда\n\n**💡 Практические советы:**\n• **Эскизы** - планируйте композицию\n• **Кадрирование** - выберите лучший ракурс\n• **Негативное пространство** - используйте пустоты\n• **Симметрия/Асимметрия** - создавайте интерес"
                }
            ]
        };
    }

    // Поиск релевантных знаний по запросу
    searchKnowledge(query) {
        const results = [];
        const queryLower = query.toLowerCase();
        
        // Поиск по всем категориям
        Object.keys(this.knowledge).forEach(category => {
            this.knowledge[category].forEach(item => {
                const questionLower = item.question.toLowerCase();
                const answerLower = item.answer.toLowerCase();
                
                // Проверяем совпадения в вопросе и ответе
                if (questionLower.includes(queryLower) || 
                    answerLower.includes(queryLower) ||
                    this.calculateSimilarity(queryLower, questionLower) > 0.3) {
                    results.push({
                        ...item,
                        category: category,
                        relevance: this.calculateSimilarity(queryLower, questionLower)
                    });
                }
            });
        });
        
        // Сортируем по релевантности
        return results.sort((a, b) => b.relevance - a.relevance);
    }

    // Простой алгоритм схожести строк
    calculateSimilarity(str1, str2) {
        const words1 = str1.split(' ');
        const words2 = str2.split(' ');
        let matches = 0;
        
        words1.forEach(word1 => {
            if (words2.some(word2 => word2.includes(word1) || word1.includes(word2))) {
                matches++;
            }
        });
        
        return matches / Math.max(words1.length, words2.length);
    }

    // Получить случайный факт
    getRandomFact() {
        const categories = Object.keys(this.knowledge);
        const randomCategory = categories[Math.floor(Math.random() * categories.length)];
        const facts = this.knowledge[randomCategory];
        const randomFact = facts[Math.floor(Math.random() * facts.length)];
        
        return {
            ...randomFact,
            category: randomCategory
        };
    }

    // Получить все знания в формате для RAG
    getAllKnowledgeForRAG() {
        let allKnowledge = [];
        
        Object.keys(this.knowledge).forEach(category => {
            this.knowledge[category].forEach(item => {
                allKnowledge.push({
                    id: `dragon_${category}_${Date.now()}_${Math.random().toString(36).slice(2)}`,
                    text: `Категория: ${category}\nВопрос: ${item.question}\nОтвет: ${item.answer}`
                });
            });
        });
        
        return allKnowledge;
    }

    // Добавить новое знание
    addKnowledge(category, question, answer) {
        if (!this.knowledge[category]) {
            this.knowledge[category] = [];
        }
        
        this.knowledge[category].push({
            question: question,
            answer: answer
        });
    }

    // Получить статистику базы знаний
    getStats() {
        const stats = {
            totalCategories: Object.keys(this.knowledge).length,
            totalItems: 0,
            categoryBreakdown: {}
        };
        
        Object.keys(this.knowledge).forEach(category => {
            const count = this.knowledge[category].length;
            stats.totalItems += count;
            stats.categoryBreakdown[category] = count;
        });
        
        return stats;
    }
}

// Экспорт для использования в других файлах
if (typeof module !== 'undefined' && module.exports) {
    module.exports = DragonKnowledgeBase;
}

// Глобальный доступ в браузере
if (typeof window !== 'undefined') {
    window.DragonKnowledgeBase = DragonKnowledgeBase;
    // Утилиты для RAG
    DragonKnowledgeBase.prototype.getAllKnowledgeForRAG = function() {
        const allKnowledge = [];
        Object.keys(this.knowledge).forEach(category => {
            this.knowledge[category].forEach(item => {
                allKnowledge.push({
                    id: `dragon_${category}_${Date.now()}_${Math.random().toString(36).slice(2)}`,
                    text: `Категория: ${category}\nВопрос: ${item.question}\nОтвет: ${item.answer}`
                });
            });
        });
        return allKnowledge;
    };
    DragonKnowledgeBase.prototype.getRandomFact = function() {
        const cats = Object.keys(this.knowledge);
        const c = cats[Math.floor(Math.random() * cats.length)];
        const arr = this.knowledge[c];
        return arr[Math.floor(Math.random() * arr.length)] || { question: 'Факт', answer: 'Нет данных' };
    };
    DragonKnowledgeBase.prototype.searchKnowledge = function(query) {
        const q = query.toLowerCase();
        const res = [];
        Object.keys(this.knowledge).forEach(category => {
            this.knowledge[category].forEach(item => {
                const hay = `${item.question} ${item.answer}`.toLowerCase();
                if (hay.includes(q)) res.push({ category, question: item.question, answer: item.answer });
            });
        });
        return res;
    };
}
